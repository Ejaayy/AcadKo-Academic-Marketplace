HOW TO START CODING

    # Step 1: Navigate to your project folder
    cd C:\Users\Edriene Paingan\academic_commission
        ‚Üí This moves you into your project directory.

    # Step 2: Activate the virtual environment
    venv\Scripts\activate  # (Windows)
        ‚Üí This makes sure Python uses your project‚Äôs specific environment 
          (with Flask installed).



RUNNING FLASK APPLICATION

    # Step 1: Navigate to your project folder
    cd C:\Users\Edriene Paingan\academic_commission  # (Windows)
    # OR
    cd /path/to/your/academic_commission  # (macOS/Linux)

    # Step 2: Activate the virtual environment
    venv\Scripts\activate  # (Windows)
    # OR
    source venv/bin/activate  # (macOS/Linux)
        ‚Üí Activates your Python environment (venv).

    # Step 3: Run the Flask app
    python app.py
        ‚Üí Starts the Flask development server.

    # Step 4: Open your browser and go to:
    http://127.0.0.1:5000/
        ‚Üí Opens your running web app locally.



PUSHING TO EXISTING GITHUB REPOSITORY

    # Step 1: Navigate to your project folder
    cd C:\Users\Edriene Paingan\academic_commission  # (Windows)

    # Step 2: Initialize Git
    git init
        ‚Üí Makes this folder a Git repo (only once).

    # Step 3: Add the GitHub repository as a remote
    git remote add origin https://github.com/Ejaayy/AcadKo-Academic-Marketplace.git
        ‚Üí Links your local repo to the GitHub repo.

    # Step 4: Add and commit your local files
    git add .
    git commit -m "Initial commit for AcadKo project"
        ‚Üí Saves your changes to Git (locally).

    # Step 5: Create and switch to the main branch
    git checkout -b main
        ‚Üí Creates the 'main' branch (if not already created).

    # Step 6: Pull from the remote main branch to merge existing remote files (like README.md)
    git pull origin main --allow-unrelated-histories
        ‚Üí Merges the GitHub version (if it has README or LICENSE).

    # Step 7: If a merge message opens, type a commit message or just save and close the editor
        ‚Üí Just save it (press Ctrl+S and close or type `:wq` in Vim if you're stuck).

    # Step 8: Push your local main branch to GitHub
    git push -u origin main
        ‚Üí Uploads your full local project to GitHub.


IN A NUTSHELL:

üß† ONLY ONCE (initial setup):

    git init
    git remote add origin https://github.com/Ejaayy/AcadKo-Academic-Marketplace.git
    git checkout -b main
    git pull origin main --allow-unrelated-histories

üîÅ EVERY TIME YOU MAKE CHANGES and want to push them:

    git add .
    git commit -m "your message about the changes"
    git push

    //If you accidentally open VIM, just use :wq to exit

üì§ UPLOADING CHANGES TO GITHUB (Example):

    # Step 1: Stage the changes
    git add reminders.txt

    # Step 2: Commit the changes with a message
    git commit -m "Update reminders.txt with new notes"

    # Step 3: Push the changes to GitHub
    git push



HOW TO SETUP FILES IN FLASK

üõ†Ô∏è REQUIRED FILE STRUCTURE:
This is a **minimal basic layout** for a Flask app:

    academic_commission/
    ‚îú‚îÄ‚îÄ app.py                  # Main Python file that runs the app
    ‚îú‚îÄ‚îÄ templates/             # HTML files go here
    ‚îÇ   ‚îú‚îÄ‚îÄ index.html
    ‚îÇ   ‚îú‚îÄ‚îÄ login.html
    ‚îÇ   ‚îî‚îÄ‚îÄ register.html
    ‚îî‚îÄ‚îÄ venv/                  # Your virtual environment (created separately)

‚úÖ SETTING THIS UP YOURSELF FROM SCRATCH:

1. **Create the folder**:
    mkdir academic_commission
    cd academic_commission

2. **Create a virtual environment**:
    python -m venv venv

3. **Activate it**:
    venv\Scripts\activate  # (Windows)

4. **Install Flask**:
    pip install flask

5. **Create your app file**:
    Create a file named `app.py` and paste this inside:

```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def index():
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
